 .data
 	buffer:		.space 1024
	local:		.space 300
	lcl:		.space 300
	dir:		.word 1
	name: 		.asciiz "\imagem"
	ppm: 		.asciiz ".ppm"
	pgm: 		.asciiz ".pgm"
	next:		.asciiz "\n"
	spc:		.asciiz " "
	sharp:		.asciiz "#"  # Verificação existência comentário
	StrIm: 		.asciiz "Quantas imagens deseja inserir\n"   #Inserção quantidade imagens
	StrLo: 		.asciiz "Qual é diretorio das imagens finalizado com barra invertida \n"   #Inserção local
	StrFor: 	.asciiz "Qual formato da imagem\n0-pgm\n1-ppm\n"   #Inserção formato
.text
  lb $s7, next
  addi $s5, $zero, 100
  addi $s4, $zero, 10 

#~~~~~~~~~~~~~ Quantidade Imagens ~~~~~~~~~~~~~# 
  li   $v0, 4       
  la   $a0, StrIm           
  syscall
  li   $v0, 5       
  syscall
  move $s6, $v0    
  
#~~~~~~~~~~~~~ Local ~~~~~~~~~~~~~# 
  li   $v0, 4       
  la   $a0, StrLo          
  syscall
  li   $v0, 8       
  la   $a0, local
  la   $a1, 300 
  syscall
  
#~~~~~~~~~~~~~ Formato ~~~~~~~~~~~~~# 
  li   $v0, 4       
  la   $a0, StrFor           
  syscall
  li   $v0, 5       
  syscall
  move $s5, $v0
  
#~~~~~~~~~~~~~ Manipulação Vetor ~~~~~~~~~~~~~# 
  addi $t0, $zero, 0
  addi $t1, $zero, 0
  addi $t2, $zero, 0
  addi $t3, $zero, 0 
  addi $t6, $zero, 0 

#~~~~~~~~~~~~~ Leitura Local ~~~~~~~~~~~~~# 
  Call:
  	lb $t7, local($t0)
  	beq $t7, $zero, FimCall1
  	sb $t7, lcl($t0)
  	addi $t0, $t0, 1
  j Call        

  # Inserindo nome da imagem
  FimCall1:
  subi $t0, $t0, 1
  Call1:
   	lb $t7, name($t1)
   	beq $t7, $zero, FimCall2
  	sb $t7, lcl($t0)
  	addi $t0, $t0, 1
   	addi $t1, $t1, 1	 
  j Call1
  
  # Inserindo Formato
  FimCall2:	add $t9, $t0, $zero
   		addi $t0, $t0, 1
   		beq $s5, $zero, Call2.2
  Call2.1:
   	lb $t7, ppm($t2)
   	beq $t7, $zero, FimCall
  	sb $t7, lcl($t0)
   	addi $t0, $t0, 1
   	addi $t2, $t2, 1
  j Call2.1
  Call2.2:
   	lb $t7, pgm($t2)
   	beq $t7, $zero, FimCall
  	sb $t7, lcl($t0)
   	addi $t0, $t0, 1
   	addi $t2, $t2, 1
  j Call2.2
 
  # Gerando número imagem
  FimCall:
  addi $t8, $t6, 48
  sb $t8, lcl($t9) 
 
 #~~~~~~~~~~~~~ Arquivo Saída ~~~~~~~~~~~~~# 
  li   $v0, 13
  la   $a0, lcl
  li   $a1, 1        
  li   $a2, 1        
  syscall            
  move $s0, $v0
 
  la $t4, dir
   #~~~~~~~~~~~~~ Abertura Imagens ~~~~~~~~~~~~~# 
  Laço: 
  	beq $t6, $s6, FimLaço
  	addi $t6, $t6, 1
  	addi $t8, $t6, 48
  	sb $t8, lcl($t9)

	# Abrindo arquivos
  	li   $v0, 13 
  	la   $a0, lcl
  	li   $a1, 0        
  	li   $a2, 0        
  	syscall    
  	sw $v0, 0($t4)
  	addi $t4, $t4, 4 
   j Laço
  FimLaço: 
  	addi $t6, $zero, 0
  	la $t4, dir
 
  # Leitura primeiro arquivo
  Call3:
  	beq $t6, $s6, FimCall3
  	addi $t6, $t6, 1
  	lw $s1, 0($t4)
  	addi $t4, $t4, 4
 Call12:
  	li   $v0, 14     
  	move $a0, $s1      
  	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
  	lb $t1, buffer
  	beq $t1, $s7, Call3
  j Call12  
  
  # Inserindo novo arquivo
  FimCall3:
  addi $t1, $zero, 80
  sb $t1, buffer
  li   $v0, 15
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall
  #Extensão arquivo novo
  beq $s5, $zero, ExPGM
  addi $t1, $zero, 51
  j ExPPM
  ExPGM: addi $t1, $zero, 50 
  ExPPM: 
  sb $t1, buffer
   li   $v0, 15	
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall 
  sb $s7, buffer
   li   $v0, 15
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall
  
  la $t4, dir
  lb $s2, spc
  lb $s3, sharp
  addi $t6, $zero, 0
  Call4: 
 	 addi $t6, $t6, 1
 	 beq $s6, $t6, FimCall4
 	 lw $s1, 0($t4)
  	addi $t4, $t4, 4
 
#~~~~~~~~~~~~~ Leitura Arquivo ~~~~~~~~~~~~~# 
  Call5:
  	li   $v0, 14     
 	move $a0, $s1      
 	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
 	lb $t1, buffer
  	beq $s3, $t1, Call11
 	beq $s2, $t1, Call4
  	beq $s7, $t1, Call4
  j Call5

  Call11: # Verificação existência de comentários
  	li   $v0, 14     
 	move $a0, $s1      
  	la   $a1, buffer  
  	li   $a2, 1     
 	syscall
  	lb $t1, buffer	
  	beq $s7, $t1, Call5
  j Call11
  FimCall4:
  addi $t6, $zero, 0
  lw $s1, 0($t4)
  
  Call6:
  	li   $v0, 14  
  	move $a0, $s1      
  	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
  	lb $t1, buffer 
  	beq $s3, $t1, Call10
  	beq $s2, $t1, FimCall6
  	beq $s7, $t1, FimCall6
  	addi $t6, $t6, 1
 	
 	#Gravando novo arquivo tamanho
  	li   $v0, 15
  	move $a0, $s0     
 	la   $a1, buffer  
  	li   $a2, 1       
  	syscall 
  j Call6
 # Existência comentário
  Call10:
  	li   $v0, 14     
  	move $a0, $s1      
  	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
  	lb $t1, buffer	
  	beq $s7, $t1, Call6
  j Call10
  #Inserindo espaço        	                
  FimCall6:
  sb $s2, buffer
  li   $v0, 15
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall 
  la $t4, dir
  addi $t6, $zero, 0
 #Largura
  Call7:
  	addi $t6, $t6, 1
  	beq $s6, $t6, FimCall7
  	lw $s1, 0($t4)
  	addi $t4, $t4, 4
  #Altura
  Call8:
  	li   $v0, 14 
 	move $a0, $s1      
  	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
  	lb $t1, buffer 
 	beq $s7, $t1, Call7
  j Call8

  FimCall7: 
  addi $t6, $zero, 0
  lw $s1, 0($t4)

  Call9:
  	li   $v0, 14     
  	move $a0, $s1      
 	la   $a1, buffer  
  	li   $a2, 1     
  	syscall
  	lb $t1, buffer 
  	beq $t1, $s7, FimCall9
  	addi $t6, $t6, 1
  #Gravando altura novo arquivo
  li   $v0, 15
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall 
  j Call9
 	
  FimCall9:
  sb $s7, buffer
  li   $v0, 15
  move $a0, $s0     
  la   $a1, buffer  
  li   $a2, 1       
  syscall 	
  						
  lb $s7, next 	
  addi $s5, $zero, 100
  addi $s4, $zero, 10 
 
  #Gravar todos pixels saída
  loop:
  addi $t0, $zero, 0
  addi $t6, $zero, 0
  addi $s3, $zero, 0
  la $t4, dir

  Laço2:
  beq $t6, $s6, FimLaço2
 
  lw $s1, 0($t4)
  addi $t4, $t4, 4
 
  # Ler primeiro pixel arquivo
  li   $v0, 14 	 
  move $a0, $s1      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  lb $t1, buffer  
  move $t8,$v0
  beq $t8, $zero, stop # Verifica fim do arquivo
  # Char -> Inteiro
  subi $t1, $t1, 48 
  
  li   $v0, 14 	     
  move $a0, $s1      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  lb $t2, buffer
  
  beq $s7, $t2, con
 
  subi $t2, $t2, 48

  li   $v0, 14    
  move $a0, $s1      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  lb $t3, buffer
  # Tamnho número pixel	
  bne $s7, $t3, if
  # 2 dígitos
  mul $t1, $t1, $s4
  add $t1, $t1, $t2 
  j con 
  # 3 Dígitos
  if:	subi $t3, $t3, 48
  	mul $t2, $t2, $s4
  	mul $t1, $t1, $s5
  	add $t1, $t1, $t2
  	add $t1, $t1, $t3

  li   $v0, 14 		      
  move $a0, $s1      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  #Salvando pixel
  con:
  	add $s3, $s3, $t1
  	addi $t6, $t6, 1
  	j Laço2
  
  FimLaço2:
  div $t0, $s3, $s6	
  slt $t7, $t0, $s5 
  bne $t7, $zero, L1
  # Inteiro -> String
  div $t1, $t0, $s5
  mul $t2, $t1, $s4
  mul $t3, $t1, $s5
  addi $t1, $t1, 48
  #Salva resultado
  sb $t1, buffer
  #Gravda resultado
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
 #Avança pixel
  div $t1, $t0, $s4
  sub $t1, $t1, $t2
  mul $t2, $t1, $s4
  addi $t1, $t1, 48
  #Grava resultado
  sb $t1, buffer
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  #Avança pixel
  sub $t1, $t0, $t2 
  sub $t1, $t1, $t3
  addi $t1, $t1, 48
  #Grava resultado
  sb $t1, buffer
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  j conloop
	 
  L1: slt $t7, $t0, $s4 	   
  bne $t7, $zero, L2
  # Avança pixel
  div $t1, $t0, $s4
  mul $t2, $t1, $s4
  addi $t1, $t1, 48
  # Grava resultado
  sb $t1, buffer
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  # Avança pixel 
  sub $t1, $t0, $t2 
  addi $t1, $t1, 48
  # Grava resultado
  sb $t1, buffer
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  j conloop
  # Apenas 1 dígito
  L2: addi $t0, $t0, 48
  # Grava Resultado
  sb $t0, buffer
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, buffer  
  li   $a2, 1      
  syscall
  # Avança pixel
  conloop:
  li   $v0, 15 		      
  move $a0, $s0      
  la   $a1, next  
  li   $a2, 1      
  syscall
  j loop
 
 #~~~~~~~~~~~~~ Finalização ~~~~~~~~~~~~~# 
  stop: 
  li $v0, 10
  syscall
